name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x' # Adjust based on your project

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      # shell: powershell
      run: |
        # mkdir .sonar\scanner
        dotnet tool update dotnet-sonarscanner --global # --tool-path .\.sonar\scanner
        dotnet tool list --global

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #shell: powershell
      run: |
        dotnet sonarscanner begin /k:"${{ secrets.SONAR_PROJECT }}" /o:"${{ secrets.SONAR_ORG }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
        dotnet build
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # # Check the Quality Gate status.
  #   - name: SonarQube Quality Gate check
  #     id: sonarqube-quality-gate-check
  #     uses: sonarsource/sonarqube-quality-gate-action@master
  #     # Force to fail step after specific time.
  #     timeout-minutes: 5
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

  #   # Optionally you can use the output from the Quality Gate in another step.
  #   # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
  #   - name: "Example show SonarQube Quality Gate Status value"
  #     run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
    - name: Wait for SonarQube Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        # Wait for quality gate status
        echo "Waiting for SonarQube quality gate to be computed..."
        sleep 30 # Adjust as necessary for your project size
        quality_gate_status=$(curl -s -u "${SONAR_TOKEN}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT }}" | jq -r '.projectStatus.status')

        if [[ "$quality_gate_status" != "OK" ]]; then
          echo "Quality Gate failed: $quality_gate_status"
          exit 1
        else
          echo "Quality Gate passed."
        fi