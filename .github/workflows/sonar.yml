name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x' # Adjust based on your project

    - name: Cache PowerShell installation
      uses: actions/cache@v3
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-powershell-${{ hashFiles('**/install-powershell.yml') }}

    - name: Install PowerShell
      run: |
        # Update the package list
        sudo apt-get update

        # Install required dependencies
        sudo apt-get install -y wget apt-transport-https software-properties-common

        # Download and install the Microsoft GPG keys
        wget -q "https://packages.microsoft.com/keys/microsoft.asc" -O- | sudo apt-key add -

        # Register the Microsoft Product feed
        sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/apt stable main"

        # Update the package list again
        sudo apt-get update

        # Install PowerShell
        sudo apt-get install -y powershell

    - name: Verify PowerShell Installation
      run: pwsh -c 'Write-Host "PowerShell is installed successfully!"'

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      # shell: powershell
      run: |
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    - name: Run SonarScanner Begin
      run: dotnet sonarscanner begin /k:"kaiwanyawit-chawankul_poc-sonarqube-quality-gate" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Build
      run: dotnet build

    - name: Run SonarScanner End
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Wait for SonarQube Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        # Wait for quality gate status
        echo "Waiting for SonarQube quality gate to be computed..."
        sleep 30 # Adjust as necessary for your project size
        quality_gate_status=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=your_project_key" | jq -r '.projectStatus.status')

        if [[ "$quality_gate_status" != "OK" ]]; then
          echo "Quality Gate failed: $quality_gate_status"
          exit 1
        else
          echo "Quality Gate passed."
        fi