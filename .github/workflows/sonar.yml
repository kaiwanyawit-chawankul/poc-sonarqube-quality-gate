name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x' # Adjust based on your project

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Run SonarScanner Begin
      run: dotnet sonarscanner begin /k:"your_project_key" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /o:"kaiwanyawit-chawankul"

    - name: Build
      run: dotnet build

    - name: Run SonarScanner End
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Wait for SonarQube Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        # Wait for quality gate status
        echo "Waiting for SonarQube quality gate to be computed..."
        sleep 30 # Adjust as necessary for your project size
        quality_gate_status=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=your_project_key" | jq -r '.projectStatus.status')

        if [[ "$quality_gate_status" != "OK" ]]; then
          echo "Quality Gate failed: $quality_gate_status"
          exit 1
        else
          echo "Quality Gate passed."
        fi